#+TITLE: Weight Loss Predictor
#+HTML: <category> R health montecarlo statistics </category>

Got for 2010 Xmas a very cool book called the "4 Hour Body"(thanks Jose Santos) written by Tim Ferriss who write a previous favorite of mine about productivity, the 4 hour work week.

Its an interesting book, because it has a scientific approach, it doesn't just say do this do that and you'll be healthy, it actually says: I(Tim Ferriss) have tried this, exactly with these steps, during this time, this is how i measured, these are the results i got and by looking at most up-to-date medical research this is the most likely explanation for these results... Notice the similar principles of AB testing.

This book couldn't have arrived in a better time as i just peeked my heaviest weight in a  long time, blame it on [insert favorite reason]... so, long story short and I am now on the 3rd week of the low-carb diet described in the book. 

But of course, like with all diets, I'm quickly growing impatient of when i'm going to reach my goal ([[http://www.wolframalpha.com/input/?i=body+mass+index&a=*C.body+mass+index-_*Formula.dflt-&a=*FS-_**BodyMassIndex.BMI-.*BodyMassIndex.H-.*BodyMassIndex.W--&f3=75+kg&x=11&y=4&f=BodyMassIndex.W_75+kg&f4=176+cm&f=BodyMassIndex.H_176+cm&a=*FVarOpt.1-_**-.***BodyMassIndex.S---.*--][of adequate BMI]]), so lets use R and monte carlo simulations to generate predictions and understand better what to expect.

* Data

Have been tracking my weight using google spreadsheets, so i can get the data into R like so:

#+begin_src R :session R :results output :exports both
# load the data
mydata = read.csv("http://spreadsheets.google.com/pub?key=0AnypY27pPCJydEwzYWxYWG1CcEpPLVQySTRrWml4OEE&hl=en_GB&single=true&gid=3&output=csv", header = TRUE, na.strings = "#VALUE!") 

# re - Something in Javascript? move NA's
mydata = na.omit(mydata)

# Create a new column with the proper date format
mydata$timestamp = as.Date(mydata$timestamp, format='%d/%m/%Y')

tail(mydata, 5)
#+end_src

#+results:
:      timestamp   kg delta       day
: 163 2011-03-28 75.0   0.3    Monday
: 164 2011-03-29 74.9  -0.1   Tuesday
: 165 2011-03-30 74.9   0.0 Wednesday
: 166 2011-03-31 75.0   0.1  Thursday
: 167 2011-04-01 74.8  -0.2    Friday

** Past Years weight

Lets have a look at the weight fluctuations over the past 3,5 years(before diet).

#+begin_src R :session R :results graphics :file /my/al3xandr3.github.com/img/w-loss-normal.png
# include ggplot2
library(ggplot2)

beforediet = subset(mydata, timestamp < "2011-01-18")
ggplot(beforediet, aes(x=timestamp, y=kg)) + geom_point() + geom_smooth() 
#+end_src

#+results:
[[file:/my/al3xandr3.github.com/img/w-loss-normal.png]]

[[http://al3xandr3.github.com/img/w-loss-normal.png]]

Weight has been mostly(in average) 80.5kg, but in 2nd half of 2010 we see a big jump.
Also note that middle of year(summer here) appears to be where jumps in weight happen.

* Predicting the Future

Now using Monte Carlo methods lets simulate the future based on the weight changes that happened since start of diet.

Because its going to use weight changes by day we need to do some trickery to fill in the missing days and calculate the changes for every single day. 
The idea for filling in missing days is: if we have only day1=81 and day3=80, then we calculate that day2=80.5, because in 2 days we see a diference of 1, then per day is 0.5. 

We can confirm(prove) that this calculated assumption is a good one, by later comparing the simulation on data with all days filled in against the same data with some removed days in the middle, and confirm that results are the same.
 
So lets get the weight(kg) change(delta), for every day:

#+begin_src R :session R :results output :exports both
library(zoo) # for missing values interpolation

fill.all.days = function (mydata, timecolname, valuecolname) {
  dtrange = range(mydata[,timecolname])

  # create a data frame with every single day
  alldays = data.frame(tmp=seq(as.Date(dtrange[1]), as.Date(dtrange[2]), "days"))
  colnames(alldays) = c(timecolname) # rename tmp to proper timecolname

  # add the existing values
  alldays = merge(alldays, mydata, by=timecolname, all=TRUE)

  # fill in the missing ones
  alldays[,valuecolname] = na.approx(alldays[,valuecolname])
  return(alldays)
}

# from start of diet
dietdata = subset(mydata, timestamp >= "2011-01-17")
lastweight = tail(dietdata$kg, n=1)

# fill in missing days
dietalldays = fill.all.days(dietdata, "timestamp", "kg")

# get difference day by day into data frame
kgdelta = diff(dietalldays$kg)
dietalldays$delta = c(0, kgdelta)

# print only the 10 last values
tail(dietalldays, 5)
#+end_src

#+results:
:     timestamp   kg delta      day
: 67 2011-03-24 75.1  -0.4 Thursday
: 68 2011-03-25 74.9  -0.2   Friday
: 69 2011-03-26 74.7  -0.2 Saturday
: 70 2011-03-27 74.7   0.0   Sunday
: 71 2011-03-28 75.0   0.3   Monday

** So what is going to be my weight in a week?

#+begin_src R :session R :results output :exports both
predict.weight.in.days = function(days, inicialweight, deltavector) {
  weight = inicialweight
  for (i in 1:days) {
    weight = weight + sample(deltavector, 1, replace=TRUE)
  }
  return(weight)
}

# simulate it 10k times
mcWeightWeek = replicate(10000, predict.weight.in.days(7, lastweight, kgdelta))

summary(mcWeightWeek)
#+end_src

#+results:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   69.90   73.47   74.10   74.11   74.77   78.30

Another good thing about monte carlo methods is that they give a distribution of the prediction, so its possible to get a feeling of how certain the average is; either very certain with a big central peak, or not that certain when the graph is flatter and all over the place:

#+begin_src R :session R :results graphics :file /my/al3xandr3.github.com/img/w-loss-week.png
gghist = function(mydata, mycolname) {
  pl = ggplot(data = mydata)
  subvp = viewport(width=0.35, height=0.35, x=0.84, y=0.84)

  his = pl + 
        geom_histogram(aes_string(x=mycolname,y="..density.."),alpha=0.2) + 
        geom_density(aes_string(x=mycolname)) + 
        opts(title = names(mydata[mycolname]))

  qqp = pl + 
        geom_point(aes_string(sample=mycolname), stat="qq") + labs(x=NULL, y=NULL) + 
        opts(title = "QQ")

  print(his)
  print(qqp, vp = subvp)
}

gghist(data.frame(kg=mcWeightWeek), "kg")
#+end_src

#+results:
[[file:/my/al3xandr3.github.com/img/w-loss-week.png]]

[[http://al3xandr3.github.com/img/w-loss-week.png]]

** And when am i getting to 75kg?

#+begin_src R :session R :results output :exports both
days.to.weight = function(weight, inicialweight, deltavector) {
  target = inicialweight
  days = 0
  while (target > weight) {
    target = target + sample(deltavector, 1, replace=TRUE)
     days = days + 1
     if (days >= 1095) # if value too crazy just interrupt the loop
        break
  }
  return(days)
}

# simulate it 10k times
mcDays75 = replicate(10000, days.to.weight(75, lastweight, kgdelta))

summary(mcDays75)
#+end_src

#+results:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:       0       0       0       0       0       0

And the cumulative distribution:

#+begin_src R :session R :results graphics :file /my/al3xandr3.github.com/img/w-loss-75.png
# add dates to it, from today's date + #days
days75 = sort(Sys.Date() + mcDays75)

# get the ecdf values into a dataframe
days75.ecdf = summarize(data.frame(days=days75), days = unique(days), 
                        ecdf = ecdf(days)(unique(days)))

# date where its 85% sure i'll reach goal
prob85 = head(days75.ecdf[days75.ecdf$ecdf>0.85,],1)

# plot
ggplot(days75.ecdf, aes(days, ecdf)) + geom_step() +
       ylab("probability") + 
       geom_point(aes(x = prob85$days, y = prob85$ecdf)) +
       geom_text(aes(x = prob85$days, y = prob85$ecdf, 
                    label = paste("85% sure to be 75kg on",
                            format(prob85$days, "%a, %d %b %Y"))), 
                     hjust=-0.04)
#+end_src

#+results:
[[file:/my/al3xandr3.github.com/img/w-loss-75.png]]

[[http://al3xandr3.github.com/img/w-loss-75.png]]

Also note that, weight loss is faster at the beginning of a diet, it tends to slow down over time, so to keep the predictions valid we need to continue record the weight and re-run the predictions frequently.

But as you see the slow carb diet seems to work, even without exercise. Tim's book is great, focusing on the smallest things possible for the bigger results(=efficiency).


* /Update/

Got to 75.0kg on 25 March!!!! Thats 67 days (aprox. 9 weeks) for a 9kg loss, thus aprox. 1kg per week. Which is within the recommended(0.9kg per week) weight loss recommendations. Thus am now within normal [[http://www.wolframalpha.com/input/?i=bmi+75kg+1.76m][BMI values]].

Regarding the diet itself i have to mention that a key food were lentils, that replaced all pasta, potato and rice, and became the main food. Around the 77kg, where i plateau'd the weight for a while, i relaxed the strict low carb diet and adopted some ideas from the [[http://www.southbeachdiet.com/sbd/publicsite/index.aspx][South Beach Diet]], that allows to add other things in moderation and makes a distinction between good and bad carbs, also stopped the binging(over-eating) 1 day per week.
This diet was done without any gym or sports, it was all about the food, will soon start to add some sport into the equation and see.

The predictor was surprisingly good, even with little data on the beginning of diet. With time there'a tendency to slow down, that is expected, so maybe adding a weight giving more importance to the most recent measures could improve accuracy in weight loss prediction with monte carlo methods.

** References

- Hard drive occupation prediction with R: [[http://lpenz.github.com/articles/df0pred-1/index.html][part 1]] and [[http://lpenz.github.com/articles/df0pred-2/index.html][part 2]], and thanks to Leandro Penz on the feedback.
- Big thanks for Tim's book and Ze's gift, on jumpstarting this experiment!

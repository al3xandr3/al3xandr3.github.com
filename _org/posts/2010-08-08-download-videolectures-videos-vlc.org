#+TITLE: How to download videolectures.net videos with VLC
#+HTML: <category> automation shell </category>

[[http://videolectures.net/][videolectures.net]] has very good content but, no good way to download the videos(at least as of now), and sometimes you want to watch them offline, so here's a way to dowload them if you have VLC video player installed.

This of course works for all videos that are streamed from an mms:// address and not only the videolectures ones.

Btw, found same idea, but using mplayer instead, from [[http://measuringmeasures.blogspot.com/2009/12/downloading-from-videolecturesnet.html][bradfordcross here]].

* How to

Find the mms:// address for the video(from the web page source) and do:

#+BEGIN_SRC sh
$ /Applications/VLC.app/Contents/MacOS/VLC -I rc mms://velblod2.ijs.si:80/2009/pascal2/mlss09uk_cambridge/mackay_it/mlss09uk_mackay_it_01.wmv --sout ~/Desktop/information-theory.avi
#+END_SRC

If you are not on a Mac, then you need to update the paths.

* Make a bash script from it

Its annoying to write all of the above every time you want to download a video, so is worth to make a bash script from it.

Create a new file, with content:

#+BEGIN_SRC sh
# getvideo.sh 
/Applications/VLC.app/Contents/MacOS/VLC -I rc $1 --sout ~/Desktop/$2.avi vlc://quit;
#+END_SRC
Note that i added the /vlc://quit;/ at the end, this will make it the script exit when finished.

Make it executable and reachable from everywhere:

#+BEGIN_SRC sh
$ chmod 711 getvideo.sh 
$ ln -s getvideo.sh /usr/bin/getvideo
#+END_SRC

And use like so:

#+BEGIN_SRC sh
$ getvideo mms://velblod2.ijs.si:80/2009/pascal2/mlss09uk_cambridge/mackay_it/mlss09uk_mackay_it_01.wmv information-theory
#+END_SRC

* Converting to mp4

 Found from: http://wiki.videolan.org/Transcode a very useful script for this, i've changed a couple of things:

#+BEGIN_SRC sh
#!/bin/bash
#
# Transcode DVB TV signals to h.264-encoded MP4 files using VLC
# Wout.Mertens@gmail.com

#### Defaults, please edit for your settings ####

# VLC location, here is the Mac OS X example
VLC="/Applications/VLC.app/Contents/MacOS/VLC -I rc" 
# Other possibilities: (Remove the # to activate)
#VLC=/usr/bin/vlc
#VLC=/usr/local/bin/vlc

# 16:9 or 4:3
aspect=4:3

# PAL (Europe) or NTSC (US)
src=PAL

# video bitrate
bitrate=1024

# audio bitrate
arate=128

# cropping?
crop=yes

# Deinterlace?
deint=yes

#### Program, do not change below this line ####
usage() {
	cat 1>&2 <<EOF
Usage: $0 [-swpncC] [-b <rate>] [-a <rate>] <DVB source .mpg>
	-s	4:3 aspect ratio (default=$aspect)
	-w	16:9 aspect ratio
	-p	PAL (720x576) input (default=$src)
	-n	NTSC (720x480) input
	-c	Crop borders (default=$crop)
	-C	Do not crop borders
	-d	Perform de-interlacing (default=$deint)
	-D	Do not perform de-interlacing
	-b	video bitrate kb/s (default=$bitrate)
	-a	audio bitrate kb/s (default=$arate)
EOF
	exit 1
}

error() {
	echo "ERROR: $*" 1>&2
	exit 2
}

while getopts 'swpncCb:a:h' opt; do
	case $opt in
		s) aspect=4:3 ;;
		w) aspect=16:9 ;;
		p) src=PAL ;;
		n) src=NTSC ;;
		c) crop=yes ;;
		C) crop=no ;;
		d) deint=yes ;;
		D) deint=no ;;
		b) bitrate=$OPTARG ;;
		a) arate=$OPTARG ;;
		h) usage ;;
		*) echo "Unknown option $opt" 1>&2; usage ;;
	esac
done
shift $(( $OPTIND - 1 ))

[ $# -ne 1 ] && usage

infile="$1"
outfile=${1%.*}
case $outfile in
	*.mp4|*.MP4) : ;;
	*) outfile="$outfile.mp4" ;;
esac

[ -r "$infile" ] || error "Can't read from $infile"

case "$src,$aspect,$crop" in
	PAL,16:9,yes) sizestr="cropleft=31,cropright=31,croptop=16,cropbottom=16,width=960,height=544" ;;
	PAL,4:3,yes)  sizestr="cropleft=31,cropright=31,croptop=16,cropbottom=16,width=720,height=544" ;;
	NTSC,16:9,yes) sizestr="cropleft=30,cropright=30,croptop=17,cropbottom=17,width=800,height=448" ;;
	NTSC,4:3,yes) sizestr="cropleft=26,cropright=26,croptop=17,cropbottom=17,width=608,height=448" ;;
	PAL,16:9,no) sizestr="width=1024,height=576" ;;
	PAL,4:3,no) sizestr="width=768,height=576" ;;
	NTSC,16:9,no) sizestr="width=800,height=448" ;;
	NTSC,4:3,no) sizestr="width=608,height=448" ;;
	*) error "Could not handle $src,$aspect,$crop. This shouldn't happen!" ;;
esac

if [ "$deint" = "yes" ]; then
	deintstr=",deinterlace=enable"
else
	deintstr=
fi

# Let's do it
echo "Input file: $infile"
echo "Output file: $outfile"
echo "Encoding at $bitrate+$arate kb/s, input $src, $aspect, cropping $crop, de-interlace $deint"
echo
echo '>>>' $VLC -I dummy "$infile" --sout "#transcode{$sizestr$deintstr,vcodec=h264,vb=$bitrate,acodec=mp4a,ab=$arate}:standard{mux=mp4,dst=\"$outfile\",access=file}" vlc://quit
echo
$VLC -I dummy "$infile" --sout "#transcode{$sizestr$deintstr,vcodec=h264,vb=$bitrate,acodec=mp4a,ab=$arate}:standard{mux=mp4,dst=\"$outfile\",access=file}" vlc://quit
#+END_SRC

 You can also make it into a system executable script, like in above instructions. I call it *2mp4*

* A step further

Now that we have 2mp4 available then we can update original script, to download + convert to mp4 in one go, like so:

#+BEGIN_SRC sh
# getvideo.sh 
/Applications/VLC.app/Contents/MacOS/VLC -I rc $1 --sout ~/Desktop/$2.avi vlc://quit;
2mp4 ~/Desktop/$2.avi;
#+END_SRC
